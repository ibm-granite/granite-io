interactions:
- request:
    body: '{"model":"granite3.2:2b","prompt":"<|start_of_role|>system<|end_of_role|>Knowledge
      Cutoff Date: April 2024.\nToday''s Date: March 05, 2025.\nYou are Granite, developed
      by IBM. You are a helpful AI assistant.<|end_of_text|>\n<|start_of_role|>user<|end_of_role|>Hello,
      how are you?<|end_of_text|>\n<|start_of_role|>assistant<|end_of_role|>I''m doing
      great. How can I help you today?<|end_of_text|>\n<|start_of_role|>user<|end_of_role|>I''d
      like to show off how chat templating works!<|end_of_text|>\n<|start_of_role|>assistant<|end_of_role|>","best_of":1,"n":1}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '556'
      content-type:
      - application/json
      host:
      - localhost:11434
      rits_api_key:
      - ollama
      user-agent:
      - OpenAI/Python 1.65.3
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.65.3
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.8
    method: POST
    uri: http://localhost:11434/v1/completions
  response:
    content: "{\"id\":\"cmpl-990\",\"object\":\"text_completion\",\"created\":1741212583,\"model\":\"granite3.2:2b\",\"system_fingerprint\":\"fp_ollama\",\"choices\":[{\"text\":\"Absolutely,
      let's dive into that! Chat templates allow us to create dynamic messages or
      responses using variables within a conversation thread. They're incredibly useful
      for streamlining customer support interactions, creating custom queries, or
      even generating personalized content for marketing campaigns. Here's how we
      can illustrate it:\\n\\nFirstly, let's agree on some variables:\\n1. User Input:
      'Hello, how's the weather today?'\\n2. Answer Template: The answer to the user\u2019s
      question about current weather, which will use another variable.\\n3. Variable
      for Weather Criterion: This can be 'sunny', 'rainy', or any other weather description
      we want to categorize based on input from a server or database.\\n\\nNow, here's
      how our chat template would look in code (using Python-like pseudocode):\\n\\n```python\\nuser_input
      = \\\"Hello, how's the weather today?\\\"\\nvariable_weather_type = \\\"sunny\\\"
      \ // This could come from e.g., a weather service API\\n\\n# Our answer template
      string with placeholder '{weather}'\\nanswer_template = f\\\"Today is {variable_weather_type}.\\\"\\n\\n#
      Using the fill-in operation, we insert value for 'weather' into our template\\nfinal_message
      = answer_template.format(weather=variable_weather_type)\\n\\nprint(final_message)
      // Outputs: \\\"Today is sunny.\\\"\\n```\\n\\nIn English conversation, let's
      use this example of a weather bot:\\n\\u003e User (me): Hello, how\u2019s the
      weather today?\\n\\u003e Bot: Today is sunny.\\n\\nHere you can see the user
      input, 'Hello, how\u2019s the weather today?', prompted the answer template
      with the variable `variable_weather_type = \\\"sunny\\\"`, and our bot responded
      with \\\"Today is sunny.\\\" The placeholders in our template (like `{weather}`)
      were replaced by actual values during runtime.\\n\\nThis illustrates how chat
      templates help us create dynamic responses, improving both the efficiency of
      interactions and the personalization of user experiences. Would you like to
      explore another aspect of this functionality?\",\"index\":0,\"finish_reason\":\"stop\"}],\"usage\":{\"prompt_tokens\":142,\"completion_tokens\":455,\"total_tokens\":597}}\n"
    headers:
      Content-Type:
      - application/json
      Date:
      - Wed, 05 Mar 2025 22:09:43 GMT
      Transfer-Encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
version: 1
